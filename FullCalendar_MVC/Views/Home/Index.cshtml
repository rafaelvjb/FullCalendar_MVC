@model Eventos
@using FullCalendar_MVC.Models
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Scripts.Render("~/bundles/jqueryval")

@section scripts{
    <script>
        $(function () {
            $("#editEventDate").datepicker();
        });
    </script>

    <script>
        var CalLoading = true;
        //Carregamento do calendário e eventos
        $(document).ready(function () {
            var month = { url: '/Home/Eventos' }
            var day = { url: '/Home/Eventos' }

            $('#calendar').fullCalendar({
                minTime: "07:00:00",
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay'
                },
                defaultView: 'agendaDay',
                editable: true,
                allDaySlot: false,
                selectable: true,
                slotMinutes: 15,
                height: 472,
                events: {
                    url: 'Eventos',
                    data: function () {
                        return {
                            usuarioId: $('#profissionalM').val()
                        };
                    }
                },

                eventClick: function (calEvent, jsEvent, view) {
                    $.ajax({
                        url: '/Home/ObtemPorId',
                        data: $('#ID').val(calEvent.ID),
                        datatype: 'json',
                        success: function (data) {
                            $('#editEventTitle').val(data.title);
                            $('#editEventDate').val(ObtemData(data.start));
                            $('#editEventTime').val(ObtemHora(data.start));
                            $('#editEventDuration').val(ObtemHora(data.end));
                            $('#profissionalE').val(data.ProfissionalId);
                            $('#Observacoes').val(data.Observacoes);
                            ModalEditar(data);
                        }
                    });
                },

                eventDrop: function (event, dayDelta, minuteDelta, allDay, revertFunc) {
                    UpdateEvent(event.ID, event.start, event.end);
                    //swal({
                    //    title: "Ajax request example",
                    //    text: "Submit to run ajax request",
                    //    type: "info",
                    //    showCancelButton: true,
                    //    closeOnConfirm: false,
                    //    showLoaderOnConfirm: true,
                    //},
                    //function () {
                    //    UpdateEvent(event.ID, event.start, event.end);
                    //    setTimeout(function(){
                    //        swal("Movido com sucesso!!!");
                    //    }, 4000);
                    //   // location.reload();
                    //});
                },
                eventResize: function (event, dayDelta, minuteDelta, revertFunc) {
                    UpdateEvent(event.ID, event.start, event.end);
                },

                dayClick: function (date, allDay, jsEvent, view) {
                    $('#eventTitle').val("");
                    $('#eventDate').val($.fullCalendar.formatDate(date, 'DD/MM/YYYY'));
                    $('#eventTime').val($.fullCalendar.formatDate(date, 'HH:mm'));
                    ModalAdicionar(date);
                },

                viewDisplay: function (view) {
                    if (lastView == 'undefined') {
                        lastView = 'firstRun';
                    }
                    if (view.name !== lastView) {
                        if (view.name == 'agendaWeek') {
                            $('#calendar').fullCalendar('addEventSource', month);
                            $('#calendar').fullCalendar('removeEventSource', day);
                            $('#calendar').fullCalendar('removeEventSource', day);
                            $('#calendar').fullCalendar('renderEvents');
                        }
                        if (view.name == 'agendaDay') {
                            $('#calendar').fullCalendar('addEventSource', day);
                            $('#calendar').fullCalendar('removeEventSource', month);
                            $('#calendar').fullCalendar('removeEventSource', month);
                            $('#calendar').fullCalendar('renderEvents');
                        }
                        if (view.name == 'month') {
                            $('#calendar').fullCalendar('addEventSource', month);
                            $('#calendar').fullCalendar('removeEventSource', day);
                            $('#calendar').fullCalendar('removeEventSource', day);
                            $('#calendar').fullCalendar('renderEvents');
                        }
                        lastView = view.name;
                    }
                }
            });

            //$('#calendar').fullCalendar('addEventSource', month);
            $('#calendar').fullCalendar('rerenderEvents');
            CalLoading = false;
        });
        //Botão cancelar do modal editar
        $('#btnPopupCancel').click(function () {
            ClearPopupFormValues();
            $('#popupEventForm').hide();
        });

        //Função em um botão do modal para deletar evento
        $('#BtnDeletaEvento').click(function () {
            $('#ModalEditar').hide();
            var idd = parseInt($('#ID').val());
            ClearPopupFormValues();
            $.ajax({
                url: "/Home/DeletaEvento",
                data: { id: JSON.stringify(idd) },
                success: function (response) {
                    if (response.message == 'sucesso') {
                        swal({
                            title: 'Evento Excluido com sucesso!!!',
                            //text: "You will not be able to recover this imaginary file!",
                            type: "success",
                            timer: 2000,
                            showConfirmButton: false
                        },
                            function () {
                                location.reload();
                            });
                        $('#ModalEditar').hide();
                    } else {
                        swal('Erro, algo');
                    }
                }
            });
        });

        //Função que serializa o formulário para adicionar e envia para o controller por ajax
        $(function () {
            $("#formClienteAdicionar input[type=submit]").click(function (event) {
                event.preventDefault();
                var form = document.getElementById("formClienteAdicionar");
                var data = $(form).serialize();
                $.post(form.action,
                    data,
                    function (response) {
                        if (response.message === 'Evento salvo com sucesso!') {
                            swal({
                                title: 'Evento salvo com sucesso!!!',
                                //text: "You will not be able to recover this imaginary file!",
                                type: "success",
                                timer: 5000,
                                showConfirmButton: true
                            },
                                function () {
                                    location.reload();
                                });
                        } else {
                            swal({
                                title: response.message,
                                //text: "You will not be able to recover this imaginary file!",
                                type: "error",
                                timer: 5000,
                                showConfirmButton: true
                            },
                                function () {
                                    location.reload();
                                });
                        }
                    });
            });

        });

        //Função que serializa o formulário para Editar e envia para o controller por ajax
        $(function () {
            $("#formClienteEditar input[type=submit]").click(function (event) {
                event.preventDefault();
                var form = document.getElementById("formClienteEditar");
                var data = $(form).serialize();
                $.post(form.action,
                    data,
                    function (response) {
                        if (response.message === 'Alterado com Sucesso') {
                            swal({
                                title: 'Alterado com Sucesso!!!',
                                //text: "You will not be able to recover this imaginary file!",
                                type: "success",
                                timer: 5000,
                                showConfirmButton: true
                            },
                                function () {
                                    location.reload();
                                });
                        } else {
                            swal({
                                title: response.message,
                                //text: "You will not be able to recover this imaginary file!",
                                type: "error",
                                timer: 5000,
                                showConfirmButton: true
                            },
                                function () {
                                    location.reload();
                                });
                        }
                    });
            });

        });
        //função que chama o ModalAdicionar
        function ModalAdicionar(date) {
            ClearPopupFormValues();
            $('#ModalAdicionar').modal('show');
            $('#eventTitle').focus();
        }

        function ObtemData(date) {
            var startDate = new Date(date);
            var formated = startDate.getDate() + "/" + (startDate.getMonth() + 1) + "/" + startDate.getFullYear();
            return formated;
        }

        function ObtemHora(date) {
            var startDate = new Date(date);
            var horaFormatada;
            var minutoFormatado;

            if (startDate.getHours() <= 9) {
                horaFormatada = "0" + startDate.getHours();
            } else {
                horaFormatada = startDate.getHours();
            }

            if (startDate.getMinutes() === 0) {
                minutoFormatado = startDate.getMinutes() + "0";
            } else {
                minutoFormatado = startDate.getMinutes();
            }


            var formated = horaFormatada + ":" + minutoFormatado;
            return formated;
        }

        function ModalEditar(date) {
            ClearPopupFormValues();
            $('#ModalEditar').modal('show');

        }

        function ClearPopupFormValues() {
            $('#eventID').val("");
            $('#eventTitle').val("");
            $('#eventDateTime').val("");
            $('#eventDuration').val("");
        }

        function UpdateEvent(EventID, EventStart, EventEnd) {
            var dataRow = {
                'ID': EventID,
                'NewEventStart': EventStart,
                'NewEventEnd': EventEnd
            }
            $.ajax({
                type: 'POST',
                url: "/Home/AtualizaDuracao",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify(dataRow),
                success: function (response) {
                    switch (response.message) {
                        case "Sucesso":
                            swal({
                                title: "Modificado com sucesso",
                                type: "success",
                                timer: 2000,
                                showConfirmButton: true
                            },
                                function () {
                                    location.reload();
                                });
                            break;
                        case "Falha ao atualizar eventos":
                            swal({
                                title: "Falha ao atualizar eventos",
                                type: "error",
                                timer: 2000,
                                showConfirmButton: true
                            },
                            function () {
                                location.reload();
                            });
                            break;

                        case "Não é possivel gravar um evento com a data anterior que a atual":
                            swal({
                                title: "Não é possivel gravar um evento com a data anterior que a atual",
                                type: "error",
                                timer: 2000,
                                showConfirmButton: true
                            },
                                function () {
                                    location.reload();
                                });
                            break;

                        case "Possui Agendamento":
                            swal({
                                title: "Este profissional já possui um agendamento neste horario!",
                                type: "error",
                                timer: 2000,
                                showConfirmButton: true
                            },
                                function () {
                                    location.reload();
                                });
                            break;
                        default:
                            var string = "";
                    }
                }
            });
        }

        function DeleteEvent(EventID, EventStart, EventEnd) {
            var dataRow = {
                'ID': EventID,
                'NewEventStart': EventStart,
                'NewEventEnd': EventEnd
            }

            $.ajax({
                type: 'POST',
                url: "/Home/DeletaEvento",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify(dataRow)
            });
        }

        function ObterValorProfissional() {
            var nome = $('#profissional').val();
        }

        $('#profissionalM').change(function () {
            $('#calendar').fullCalendar('refetchEvents');
        });
    </script>
}

<!--Filtro por Profissional-->
<div class="row" style="padding-top:15px;">
    <div class="col-md-3">
        @using (Html.BeginForm("Index", "Home"))
        {
            <div class="row" style="padding-top:20px">
                <h4 style="text-align:center;padding-left:30px">Filtro por Profissional</h4>

                <div class="form-group">
                    <div class="col-md-12 col-md-offset-1">
                        @Html.DropDownListFor(model => model.ProfissionalId, ((IEnumerable<Profissional>)ViewBag.Profissionais).Select(option => new SelectListItem
                   {
                       Text = option.Nome,
                       Value = option.ProfissionalId.ToString(),
                       Selected = (Model != null) && (option.ProfissionalId == Model.ProfissionalId)
                   }), "Selecione", new { id = "profissionalM", @class = "form-control" })
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="col-md-9">
        <div id="calendar"></div>
    </div>

</div>

<!--Modal Adicionar-->
<div class="modal fade" id="ModalAdicionar" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" style="text-align: center" id="myModalLabel">Agendar</h4>
            </div>
            <div class="modal-body">

                @using (Html.BeginForm("SalvaEvento", "Home", FormMethod.Post, new { id = "formClienteAdcionar" }))
                {
                    <div class="row">
                        <div class="form-group">
                            <div class="col-md-8 col-md-offset-2">
                                <label class="control-label">Nome Completo</label>
                                <input id="eventTitle" type="text" name="Titulo" class="form-control" />
                            </div>
                        </div>

                    </div>
                    <div class="row" style="padding-top: 10px;">
                        <div class="form-group">
                            <div class="col-md-8 col-md-offset-2">
                                <label class="control-label">Profissional</label>
                                @Html.DropDownListFor(model => model.ProfissionalId, ((IEnumerable<Profissional>)ViewBag.Profissionais).Select(option => new SelectListItem
                           {
                               Text = option.Nome,
                               Value = option.ProfissionalId.ToString(),
                               Selected = (Model != null) && (option.ProfissionalId == Model.ProfissionalId)
                           }), "Selecione", new { id = "profissional", @class = "form-control", required = "required" })
                            </div>
                        </div>
                    </div>



                    <div class="row" style="padding-top: 10px;">
                        <div class="form-group">
                            <div class="col-md-8 col-md-offset-2">
                                <label class="control-label col-md-2">Convenios</label>
                                @Html.DropDownListFor(model => model.ConvenioId, ((IEnumerable<Convenio>)ViewBag.Convenios).Select(option => new SelectListItem
                           {
                               Text = option.Nome,
                               Value = option.ConvenioId.ToString(),
                               Selected = (Model != null) && (option.ConvenioId == Model.ConvenioId)
                           }), "Selecione", new { id = "profissional", @class = "form-control", required = "required" })
                            </div>
                        </div>
                    </div>

                    <div class="row" style="padding-top: 10px;">
                        <div class="form-group">
                            <div class="col-md-10 col-md-offset-2">
                                <div class="col-md-4">
                                    <label class="control-label" style="padding-right: 10px; padding-top: 5px;">Consulta</label>
                                    @Html.CheckBox("Consulta")
                                </div>
                                <div class="col-md-4 col-md-offset-1">
                                    <label class="control-label" style="padding-right: 10px; padding-top: 5px;">Retorno</label>
                                    @Html.CheckBox("Retorno")
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-10 col-md-offset-1" style="padding-top:15px;">
                                <label for="comment" class="col-md-offset-5">Observações:</label>
                                <textarea class="form-control" name="Observacoes" rows="5" id="comment"></textarea>
                            </div>
                        </div>
                        <div class="col-md-offset-5 col-md-8" style="padding-top: 30px;">
                            <input type="submit" value="Salvar" class="btn btn-default" style="text-align:center" />
                        </div>
                    </div>

                    <!--Campos invisiveis-->
                    <input id="eventTime" type="text" name="HoraEvento" class="form-control" style="display:none" />
                    <input type="text" name="DuracaoEvento" class="form-control" style="display:none" />
                    <input id="eventDate" type="text" name="DataEvento" class="form-control" style="display: none" />
                }
            </div>
        </div>
    </div>
</div>


<!--Modal para Editar evento-->
<div class="modal fade" id="ModalEditar" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" style="text-align:center;" id="editModalLabel">Editar Eventos</h4>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("AtualizaEvento", "Home", FormMethod.Post, new { id = "formClienteEditar" }))
                {
                    @Html.Hidden("ID")
                    <div class="row">
                        <div class="form-group">
                            <div class="col-md-6">
                                <!-- Titulo do evento -->
                                <label class="control-label col-md-2">Nome</label>
                                <input type="text" required="required" name="Titulo" id="editEventTitle" class="form-control" placeholder="Nome" />
                            </div>
                            <div class="col-md-6">
                                <!-- Data do Evento -->
                                <label class="control-label col-md-2">Data</label>
                                <input type="text" name="DataEvento" id="editEventDate" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group">
                            <div class="col-md-6" style="padding-top: 10px;">

                                <!-- Hora do Evento -->
                                <label class="control-label">Horario de inicio</label>
                                <input type="text" name="HoraEvento" id="editEventTime" class="form-control" />
                            </div>
                            <div class="col-md-6" style="padding-top: 10px;">

                                <!-- Horario de término do evento  -->
                                <label class="control-label">Horario de término</label>
                                <input type="text" name="duracaoEvento" id="editEventDuration" class="form-control" placeholder="30" />
                            </div>
                        </div>
                    </div>

                    <div class="row" style="padding-top: 20px;">
                        <div class="form-group">
                            <!-- Profissional Id -->

                            <div class="col-md-6">
                                <label class="control-label col-md-2">Profissional</label>
                                @Html.DropDownListFor(model => model.ProfissionalId, ((IEnumerable<Profissional>)ViewBag.Profissionais).Select(option => new SelectListItem
                           {
                               Text = option.Nome,
                               Value = option.ProfissionalId.ToString(),
                               Selected = (Model != null) && (option.ProfissionalId == Model.ProfissionalId)
                           }), "Selecione", new { id = "profissionalE", @class = "form-control", required = "required" })
                            </div>

                            <div class="col-md-6">
                                <label class="control-label col-md-2">Convênio</label>
                                @Html.DropDownListFor(model => model.ConvenioId, ((IEnumerable<Convenio>)ViewBag.Convenios).Select(option => new SelectListItem
                           {
                               Text = option.Nome,
                               Value = option.ConvenioId.ToString(),
                               Selected = (Model != null) && (option.ConvenioId == Model.ProfissionalId)
                           }), "Selecione", new { id = "convenioE", @class = "form-control", required = "required" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 col-md-offset-2" style="padding-top: 20px;">
                            <!-- Consulta -->
                            <label class="control-label">Consulta</label>
                            @Html.CheckBox("ConsultaE")
                        </div>

                        <div class="col-md-4 col-md-offset-2" style="padding-top: 20px;">
                            <!-- Retorno -->
                            <label class="control-label">Retorno</label>
                            @Html.CheckBox("RetornoE")
                        </div>
                    </div>


                        <div class="form-group" style="padding-top: 15px;">

                            <!-- Observacoes -->
                            <label class="control-label">Observações:</label>
                            <textarea class="form-control" name="Observacoes" rows="5" id="Observacoes"></textarea>
                        </div>
                        <div class="row">
                            <div>
                                <div class="modal-footer col-md-8 col-md-offset-2" style="text-align: center;padding-top:10px;">
                                    <input type="submit" id="btnPopupCancel" class="btn btn-primary" data-dismiss="modal" value="Cancelar" />
                                    <button type="button" id="BtnDeletaEvento" class="btn btn-danger" value="Deletar">Deletar</button>
                                    <input type="submit" value="Salvar" class="btn btn-success" style="text-align:center" />
                                </div>
                            </div>
                        </div>
                }
            </div>
        </div>
    </div>
</div>

<!--Modal de confirmação-->
<div class="modal fade" tabindex="-1" id="ModalConfirma" role="dialog" aria-labelledby="mySmallModalLabel">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @*<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>*@
                <h4 class="modal-title" style="padding-left:20px;">Deseja alterar este evento?</h4>
            </div>
            <hr />
        </div>
    </div>
</div>